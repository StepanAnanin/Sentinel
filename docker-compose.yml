services:
  sentinel:
    build: .
    ports:
      - "0.0.0.0:8080:8080" # make sure that container port is the same in config
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: on-failure
    environment:
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - REDIS_HOST=redis
      - REDIS_PORT=6379

  postgres:
    image: postgres:17.2
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
    ports:
      - "5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d sentinel"]
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7.2.5-alpine
    ports:
      - "6379"
    volumes:
      - redis_data:/data
    networks:
      - default
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 1s
      timeout: 3s
      retries: 5

networks:
  default:
    driver: bridge
    enable_ipv6: false

volumes:
  postgres_data:
  redis_data:

